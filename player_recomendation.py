# -*- coding: utf-8 -*-
"""Player Recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZg5toGwXSH0yOuytG2Aypw5mDHwkJrO
"""

import pandas as pd
import numpy as np
d=pd.read_excel("/content/IPL 2024 Statistics _ Team and Player Stats.xlsx")
d.head()

d.isna().sum()

# prompt: code for label encoder AND ENCODE AVG COLUMN

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

# Assuming the code you provided is already executed and 'd' is your DataFrame
# Replace 'AVG' with the actual column name if it's different
le = LabelEncoder()
d['AVG'] = le.fit_transform(d['AVG'])
print(d.head())

d.describe()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()  # Standardize the data for better grouping
features = d[['AVG', 'SR']]
scaled_features = scaler.fit_transform(features)
d.head()

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=2, random_state=42)
d['Group'] = kmeans.fit_predict(scaled_features)
d['Group']

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(d['RUNS'], d['SR'], c=d['Group'], cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', label='Centroids')
plt.xlabel('RUNS')
plt.ylabel('SR')
plt.title('IPL Player Clusters')
plt.legend()
plt.show()

def recommend_players(d, runs, strike_rate):
    input_scaled = scaler.transform([[runs, strike_rate]])
    group = kmeans.predict(input_scaled)[0]
    recommended_players = d[d['Group'] == group]
    return recommended_players[['PLAYER1', 'RUNS', 'SR']]

# Example: Find players similar to someone with 1000 runs and 125 strike rate
target_runs = 1000
target_strike_rate = 125
recommended = recommend_players(d, target_runs, target_strike_rate)

print("Recommended Players:")
print(recommended)

#Evaluation Metrics
from sklearn.metrics import silhouette_score
silhouette_avg = silhouette_score(scaled_features, d['Group'])
print(f"Silhouette Score: {silhouette_avg}")

import pickle

# Assuming 'kmeans' and 'scaler' are defined as in your previous code
filename = 'kmeans_model.pkl'
pickle.dump(kmeans, open(filename, 'wb'))

filename = 'scaler_model.pkl'
pickle.dump(scaler, open(filename, 'wb'))